import socket
from pandas import DataFrame
import requests
from requests.auth import HTTPBasicAuth
from bs4 import BeautifulSoup
import mariadb
import sys
import json
import hashlib


print("Start")

current_data_from_axxon=[]
checked_data=[]

def check_Error(func):
    def wrapper(*args):
        try:
            return func(*args)
        except Exception as e:
            print("Error:", e)
    return wrapper


@check_Error
def data_collection_DB():
    cur.execute("SELECT * FROM cam_list ")
    current_data_from_DB = cur.fetchall()
    return current_data_from_DB


@check_Error
def data_collection_axxon():
    response = requests.get(url, auth=HTTPBasicAuth('nikita', '139602215n'))
    data = response.json()
    for counter in range(0,len(data['cameras'])):

        if data['cameras'][counter]['isActivated'] == True:
            new_status = 'online'
        else:
            new_status = 'offline'

        if new_status == 'online':
            new_name=data['cameras'][counter]['displayName']
            new_ip=data['cameras'][counter]['ipAddress']
            url_ip = "http://"+new_ip+"/doc/page/login.asp?_1584422935045"
            try:
                r = requests.get(url_ip, timeout=3)
                s = BeautifulSoup(r.content, 'html.parser')
                first_div = s.find('div',{"class" : "footer"})
                if first_div != None:
                   new_vendor='Hikvision'
                else:
                   new_vendor='dahua'
            except requests.exceptions.ConnectTimeout:
                new_status='offline'
            except requests.exceptions.ConnectionError:
                new_status='offline'
            except:
               pass

        new_data_from_axxon = (new_name, new_ip, new_vendor, new_status)
        current_data_from_axxon.append(new_data_from_axxon)
    return current_data_from_axxon

@check_Error
def transformation_data_DB():
    data_str_DB=str(current_data_from_DB)
    return data_str_DB

@check_Error
def transformation_data_axxon():
    data_str_axxon=str(current_data_from_axxon)
    return data_str_axxon

@check_Error
def checkData (current_data_from_DB, current_data_from_axxon):
    for counter_1 in range(0,len(current_data_from_DB)):
        DB_data =  {'name':current_data_from_DB[counter_1][0], 'ip': current_data_from_DB[counter_1][1], 'vendor':current_data_from_DB[counter_1][2], 'status': current_data_from_DB[counter_1][3]}
        axxon_data =  {'name':current_data_from_axxon[counter_1][0], 'ip': current_data_from_axxon[counter_1][1], 'vendor':current_data_from_axxon[counter_1][2], 'status': current_data_from_axxon[counter_1][3]}
        BoolData = {'name':current_data_from_DB[counter_1][0] == current_data_from_axxon[counter_1][0], 'ip': current_data_from_DB[counter_1][1] == current_data_from_axxon[counter_1][1], 'vendor':current_data_from_DB[counter_1][2] == current_data_from_axxon[counter_1][2], 'status': current_data_from_DB[counter_1][3] == current_data_from_axxon[counter_1][3]}
        checked = ({'DB':DB_data, 'AXXON':axxon_data, 'BOOL':BoolData})
        checked_data.append(checked)
    return(checked_data)

url = 'http://10.0.0.49/camera/list' #сервер axxon
response = requests.get(url, auth=HTTPBasicAuth('nikita', '139602215n'))
data = response.json()

try:
    conn = mariadb.connect(
        user="admin",
        password="1qazxsw2",
        host="localhost",
        port=3306,
        database="cam_test"
    )
except mariadb.Error as e:
    print(f"Error connecting to MariaDB Platform: {e}")
    sys.exit(1)

cur = conn.cursor()
print("conn OK!")

url = 'http://10.0.0.49/camera/list'


print(1)
current_data_from_DB = data_collection_DB()
print(2)
current_data_from_axxon = data_collection_axxon()
print(2)

data_str_DB = transformation_data_DB()
data_str_axxon = transformation_data_axxon()


hash_data_DB=hashlib.md5(data_str_DB.encode())
hash_data_axxon=hashlib.md5(data_str_axxon.encode())


if hash_data_DB != hash_data_axxon:
    print("axxon")
else:
    print('No changes')
    sys.exit()

print(3)
checked_data=checkData(current_data_from_DB, current_data_from_axxon)

for counter_2 in range(0,len(checked_data)):
    if False in checked_data[counter_2].get('BOOL').values():
        sql="UPDATE cam_list SET name = "+"'"+checked_data[counter_2].get('AXXON').get('name')+"', " + "vendor = " + "'"+checked_data[counter_2].get('AXXON').get('vendor')+"', " + "status = " +"'"+checked_data[counter_2].get('AXXON').get('status')+", '"+ " WHERE ip = " + "'"+checked_data[counter_2].get('AXXON').get('ip')+"'"
        cur.execute(sql)

conn.commit()
conn.close()


# id = ['208428842','1266497665','134787881','401975771']
# for i in id:
#     url = requests.post('https://api.telegram.org/bot1153858227:AAHPj_O2ziHpATV9Uwz8hlGRWppDpesqmjg/sendMessage?chat_id='+i+'&text=Данные камер обновлены!')

#         # if current_ip == []:
#     #     print("to DB: ",ip)
#     #     cur.execute("INSERT INTO cam_list (name,ip,vendor,status) VALUES ('%s','%s','%s','%s')"%(str(name),str(ip),str(vendor),str(status) ))
#     # else:
#     #     print("from DB: ",current_ip)
#

# UPDATE SET status = '%s'%(str(new_ip)) WHERE ip IN ('%s'%(str(new_ip)))


# load=(name, ip, vendor, status)
# data_cam.append(load)
# df = DataFrame(data_cam, columns=['name', 'ip', 'vendor','status'])
# export_csv = df.to_csv (r'result.csv',  sep=';', encoding='utf-8')
